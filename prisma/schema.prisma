generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                           String                 @id @default(uuid()) @db.Uuid
  clerkId                      String                 @unique
  email                        String                 @unique
  name                         String?
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @default(now())
  amountCredits                Int
  totalConversations           Int                    @default(0)
  totalAverageDuration         Int                    @default(0)
  totalCost                    Int                    @default(0)
  initialAmountCredits         Int                    @default(1000)
  nangoConnectSessionExpiresAt DateTime?
  nangoConnectSessionToken     String?
  plan                         String?
  temporalVariantId            String?
  accessTokens                 AccessToken[]
  agents                       Agent[]
  campaigns                    Campaign[]
  chatAgents                   ChatAgent[]
  chatWorkflows                ChatWorkflow[]
  connections                  Connection[]
  creditLedgers                CreditLedger[]
  elevenLabsWidgets            ElevenLabsWidget[]
  integrations                 Integration[]
  knowledgeBases               KnowledgeBase[]
  leads                        Lead[]
  lsSubscriptions              LsSubscription[]
  notifications                Notification[]
  phoneNumbers                 PhoneNumber[]
  prospects                    Prospect[]
  stages                       Stage[]
  subscriptions                Subscription[]
  tags                         Tag[]
  transactions                 Transaction[]
  usageEvents                  UsageEvent[]
  voiceTriggers                VoiceWorkflowTrigger[]
  wompiIntegration             WompiIntegration?
  workflows                    Workflow[]
  workflowTriggers             WorkflowTrigger[]

  @@map("users")
}

model UserAssets {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  type      String
  name      String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Agent {
  id              String  @id @default(uuid()) @db.Uuid
  userId          String  @db.Uuid
  prompt          String
  name            String
  backgroundSound String?
  firstMessage    String
  vapiId          String? @unique
  voiceId         String?
  language        String  @default("multi")
  User            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tools           Tool[]  @relation("AgentToTool")
}

model PhoneNumber {
  id              String     @id @default(uuid()) @db.Uuid
  provider        String
  number          String
  extension       String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  userId          String     @db.Uuid
  name            String?    @default("nuevo-numero")
  sipPassword     String?
  sipUri          String?
  sipUsername     String?
  twilioAccountId String?
  twilioAuthToken String?
  vapiId          String?    @unique @db.Uuid
  credentialId    String?    @db.Uuid
  assistantId     String?    @db.Uuid
  workflowId      String?    @unique @db.Uuid
  campaigns       Campaign[]
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  workflow        Workflow?  @relation(fields: [workflowId], references: [id])
}

model ChatAgent {
  id                        String            @id @default(uuid()) @db.Uuid
  name                      String
  isActive                  Boolean           @default(false)
  createdAt                 DateTime          @default(now())
  updatedAt                 DateTime          @updatedAt
  userId                    String            @db.Uuid
  whatsappAccessToken       String
  whatsappBusinessAccountId String
  whatsappPhoneNumber       String
  whatsappPhoneNumberId     String            @unique
  hasSeenTestWarning        Boolean           @default(false)
  isTestNumber              Boolean           @default(false)
  activeWorkflowId          String?           @db.Uuid
  mode                      ChatAgentMode     @default(FLOW)
  prompt                    String?           @default("")
  user                      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatContacts              ChatContact[]
  chatSessions              ChatSession[]
  workflows                 ChatWorkflow[]
  messages                  Message[]
  messageTemplates          MessageTemplate[]
}

model MessageTemplate {
  id                 String           @id @default(uuid()) @db.Uuid
  /// nombre interno (único por agente + idioma)
  name               String
  /// en_US, es_ES, …
  language           String
  category           TemplateCategory
  /// enum ya existente
  status             TemplateStatus   @default(PENDING)
  /// ID que devuelve la API
  whatsappTemplateId String?          @unique
  /// payload normalizado que envías a la API
  components         Json
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  agentId            String           @db.Uuid
  agent              ChatAgent        @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([name, language, agentId])
}

model Workflow {
  id               String                 @id @default(uuid()) @db.Uuid
  name             String
  vapiId           String?                @unique
  tools            Json?
  workflowJson     Json?
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  userId           String                 @db.Uuid
  active           Boolean                @default(true)
  fields           Json?
  vapiWorkflowData Json?
  vapiWorkflowId   String?                @unique
  phoneNumber      PhoneNumber?
  triggers         VoiceWorkflowTrigger[]
  user             User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Prospect {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  email     String   @unique
  title     String?
  company   String?
  source    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ownerId   String   @db.Uuid
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId])
}

model Campaign {
  id             String      @id @default(uuid()) @db.Uuid
  vapiCampaignId String?     @unique
  name           String
  status         String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  userId         String      @db.Uuid
  phoneNumberId  String      @db.Uuid
  assistantId    String?     @db.Uuid
  customers      Json
  phoneNumber    PhoneNumber @relation(fields: [phoneNumberId], references: [id])
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ElevenLabsWidget {
  id               String   @id @default(uuid()) @db.Uuid
  agentId          String   @unique
  name             String
  firstMessage     String?
  systemPrompt     String
  voiceId          String?
  actionText       String?
  avatarImageUrl   String?
  dynamicVariables Json?
  ownerId          String   @db.Uuid
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  owner            User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model ChatWorkflow {
  id        String            @id @default(uuid()) @db.Uuid
  name      String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  agentId   String?           @db.Uuid
  workflow  Json
  userId    String?           @db.Uuid
  sessions  ChatSession[]
  agent     ChatAgent?        @relation(fields: [agentId], references: [id], onDelete: Cascade)
  user      User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  triggers  WorkflowTrigger[]

  @@unique([name, agentId, userId])
}

model ChatContact {
  phone       String        @unique
  name        String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  chatAgentId String        @db.Uuid
  id          String        @id @default(uuid()) @db.Uuid
  chatAgent   ChatAgent     @relation(fields: [chatAgentId], references: [id], onDelete: Cascade)
  sessions    ChatSession[]
  messages    Message[]
}

model ChatSession {
  id            String        @id @default(cuid())
  workflowId    String        @db.Uuid
  currentNodeId String
  variables     Json          @default("{}")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  chatAgentId   String        @db.Uuid
  contactId     String        @db.Uuid
  status        SessionStatus @default(ACTIVE)
  chatAgent     ChatAgent     @relation(fields: [chatAgentId], references: [id], onDelete: Cascade)
  contact       ChatContact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  workflow      ChatWorkflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([contactId, status])
}

model Connection {
  id                String   @id @default(uuid()) @db.Uuid
  connectionId      String
  providerConfigKey String?
  authMode          String
  endUserId         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String   @db.Uuid
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model KnowledgeBase {
  id           String   @id @default(uuid()) @db.Uuid
  trieveApiKey String
  vapiId       String?  @unique
  name         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String   @db.Uuid
  credentialId String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  waId          String       @unique
  from          String
  to            String
  timestamp     DateTime
  type          MessageType
  textBody      String?
  metadata      Json?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  id            String       @id @default(uuid()) @db.Uuid
  chatAgentId   String       @db.Uuid
  chatContactId String?      @db.Uuid
  chatAgent     ChatAgent    @relation(fields: [chatAgentId], references: [id], onDelete: Cascade)
  chatContact   ChatContact? @relation(fields: [chatContactId], references: [id], onDelete: Cascade)

  @@index([from])
  @@index([timestamp])
  @@index([chatAgentId])
}

model Lead {
  id          String   @id @default(uuid())
  name        String
  company     String
  email       String
  phone       String
  status      String?
  tags        String[]
  lastContact String
  notes       String?
  value       Float?
  userId      String   @db.Uuid
  stageId     String
  stage       Stage    @relation(fields: [stageId, userId], references: [id, userId], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([stageId, userId])
}

model Stage {
  name   String
  color  String
  userId String @db.Uuid
  id     String
  leads  Lead[]
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([id, userId])
  @@unique([name, userId])
}

model Tag {
  name   String
  color  String
  userId String @db.Uuid
  id     String @id @default(uuid()) @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
}

model Call {
  id                  String    @id @default(uuid()) @db.Uuid
  vapiId              String?   @unique
  type                String
  orgId               String?
  createdAt           DateTime
  updatedAt           DateTime
  startedAt           DateTime?
  endedAt             DateTime?
  status              String
  endedReason         String?
  cost                Float?
  costBreakdown       Json?
  costs               Json[]
  phoneCallProvider   String?
  phoneCallTransport  String?
  phoneCallProviderId String?
  messages            Json[]
  assistantId         String?
  assistantOverrides  Json?
  squadId             String?
  workflowId          String?
  phoneNumberId       String?
  customerId          String?
  destination         Json?
  artifactPlan        Json?
  analysis            Json?
  monitor             Json?
  artifact            Json?
  schedulePlan        Json?
  transport           Json?
  name                String?

  @@map("calls")
}

model Subscription {
  id                 String    @id @default(uuid()) @db.Uuid
  planId             String    @db.Uuid
  status             String
  userId             String    @db.Uuid
  lemonSqueezyId     String    @unique
  email              String
  endsAt             String?
  isPaused           Boolean   @default(false)
  isUsageBased       Boolean   @default(false)
  name               String
  orderId            Int
  price              String
  renewsAt           String?
  statusFormatted    String
  subscriptionItemId String?   @default(uuid())
  trialEndsAt        String?
  currentCredits     Int       @default(0)
  cycleEndAt         DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  plan               Plan      @relation(fields: [planId], references: [id], onDelete: Cascade)
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Plan {
  id                         String         @id @default(uuid()) @db.Uuid
  name                       String
  price                      String
  interval                   String?
  description                String?
  intervalCount              Int?
  isUsageBased               Boolean        @default(false)
  productId                  Int
  productName                String?
  sort                       Int?
  trialInterval              String?
  trialIntervalCount         Int?
  variantId                  Int            @unique
  chatCreditsPerConversation Int            @default(5)
  creditsPerCycle            Int            @default(0)
  overageChatUsd             Float?         @default(0.07)
  overageVoiceUsd            Float?         @default(0.17)
  voiceCreditsPerMinute      Int            @default(11)
  ui                         Json?
  subscriptions              Subscription[]
}

model Transaction {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  amount    Float
  type      String
  status    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Integration {
  id             String              @id @default(uuid()) @db.Uuid
  userId         String              @db.Uuid
  provider       IntegrationProvider
  accessToken    String?
  refreshToken   String?
  tokenExpiresAt DateTime?
  scopes         String[]
  metadata       Json?
  lastSyncedAt   DateTime?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  status         String
  user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([provider])
}

model WompiIntegration {
  id               String   @id @default(uuid()) @db.Uuid
  userId           String   @unique @db.Uuid
  wompiAccessToken String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  publicKey        String   @unique
  eventsSecret     String   @unique
  privateKey       String   @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AccessToken {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @db.Uuid
  /// descriptive name, e.g. "crm-whatsapp-integration"
  name        String
  accessToken String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
}

model LsPlan {
  id            String           @id @default(uuid()) @db.Uuid
  storeId       Int
  productId     Int
  variantId     Int              @unique
  name          String
  price         Int
  interval      String?
  intervalCount Int?
  isUsageBased  Boolean          @default(false)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  subscriptions LsSubscription[]
}

model LsSubscription {
  id               String               @id @default(uuid()) @db.Uuid
  lsSubscriptionId Int                  @unique
  userId           String               @db.Uuid
  planId           String               @db.Uuid
  status           LsSubscriptionStatus
  renewsAt         DateTime?
  endsAt           DateTime?
  trialEndsAt      DateTime?
  isPaused         Boolean              @default(false)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  plan             LsPlan               @relation(fields: [planId], references: [id], onDelete: Cascade)
  user             User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([planId])
}

model Credit {
  id     String @id @default(cuid())
  userId String
}

model Notification {
  id        String           @id @default(uuid())
  userId    String           @db.Uuid
  type      NotificationType
  read      Boolean          @default(false)
  message   String
  link      String?
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model CreditLedger {
  id        String           @id @default(uuid()) @db.Uuid
  userId    String           @db.Uuid
  delta     Int
  type      CreditLedgerType
  meta      Json?
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UsageEvent {
  id             String    @id @default(uuid()) @db.Uuid
  userId         String    @db.Uuid
  kind           UsageKind
  quantity       Int
  creditsCharged Int
  externalRef    String?
  meta           Json?
  createdAt      DateTime  @default(now())
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, kind])
}

model WorkflowTrigger {
  id           String       @id @default(uuid()) @db.Uuid
  /// API token opcional para disparo manual
  token        String       @unique
  /// Dueño del flujo / trigger
  userId       String       @db.Uuid
  /// Flujo que se disparará
  workflowId   String       @db.Uuid
  /// ConnectionId de Nango (nullable para Generic Webhook)
  connectionId String?      @db.Uuid
  /// Nombre del sync en Nango (ej. "sheet-new-rows")
  syncName     String?
  /// google-sheet | airtable | hubspot | webhook | ...
  provider     String
  /// { phone:"phone", vars:{ name:"name" } }
  mapping      Json
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  workflow     ChatWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([workflowId, provider, connectionId])
  @@index([connectionId])
  @@index([provider])
}

model VoiceWorkflowTrigger {
  id         String   @id @default(uuid()) @db.Uuid
  /// Token de seguridad para la URL del webhook
  token      String   @unique
  /// Nombre descriptivo (ej. "webhook-hubspot-new-lead")
  provider   String
  /// { "phone": "properties.phone", "vars": { "name": "properties.firstname" } }
  mapping    Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  /// El Workflow de voz que se disparará
  workflowId String   @db.Uuid
  /// Dueño del flujo / trigger
  userId     String   @db.Uuid
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId])
  @@index([userId])
}

model Tool {
  id          String   @id @default(uuid()) @db.Uuid
  /// Identificador interno para el LLM (ej: getAvailability)
  name        String   @unique
  description String
  /// Esquema JSON de parámetros estilo OpenAI / Vapi
  parameters  Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  provider    String?
  agents      Agent[]  @relation("AgentToTool")
}

enum IntegrationProvider {
  FACEBOOK
  GOOGLE_CALENDAR
  GOOGLE_SHEETS
  CAL_COM
  HUBSPOT
  AIRTABLE
}

enum MessageType {
  TEXT
  IMAGE
  AUDIO
  VIDEO
  DOCUMENT
  LOCATION
  CONTACTS
  BUTTON
  INTERACTIVE
}

enum TYPE_AGENT {
  outbound
  inbound
  widget
}

enum TYPE_CHAT_AGENT {
  SALES
}

enum OrderStatus {
  PENDING
  APPROVED
  FAILED
  CANCELLED
}

enum SessionStatus {
  ACTIVE
  COMPLETED
  NEEDS_ATTENTION
}

enum TemplateStatus {
  PENDING
  APPROVED
  REJECTED
}

enum LsSubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELLED
  EXPIRED
  TRIALING
}

enum NotificationType {
  HANDOVER_REQUEST
  BILLING_ISSUE
  TEMPLATE_APPROVED
}

enum CreditLedgerType {
  debit
  credit
  reset
  rollover
}

enum TemplateCategory {
  UTILITY
  MARKETING
  AUTHENTICATION
}

enum UsageKind {
  voice
  chat
}

enum ChatAgentMode {
  FLOW
  PROMPT
}
