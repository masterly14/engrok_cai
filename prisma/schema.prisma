generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                           String          @id @default(uuid()) @db.Uuid
  clerkId                      String          @unique
  email                        String          @unique
  name                         String?
  createdAt                    DateTime        @default(now())
  updatedAt                    DateTime        @default(now())
  amountCredits                Int
  totalConversations           Int             @default(0)
  totalAverageDuration         Int             @default(0)
  totalCost                    Int             @default(0)
  initialAmountCredits         Int             @default(1000)
  nangoConnectSessionExpiresAt DateTime?
  nangoConnectSessionToken     String?
  agents                       Agent[]
  chatAgents                   ChatAgent[]
  connections                  Connection[]
  integrations                 Integration[]
  knowledgeBases               KnowledgeBase[]
  leads                        Lead[]
  orders                       Order[]
  phoneNumbers                 PhoneNumber[]
  stages                       Stage[]
  subscriptions                Subscription[]
  tags                         Tag[]
  transactions                 Transaction[]
  workflows                    Workflow[]
  lsSubscriptions              LsSubscription[]
}

model Contact {
  id           String        @id @default(uuid()) @db.Uuid
  waId         String        @unique
  name         String?
  phoneNumber  String
  company      String?
  email        String?
  lastSeen     DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  stageId      String?
  notes        String?
  stageUserId  String?       @db.Uuid
  chatAgentId  String?       @db.Uuid
  chatAgent    ChatAgent?    @relation(fields: [chatAgentId], references: [id])
  stage        Stage?        @relation(fields: [stageId, stageUserId], references: [id, userId])
  conversation Conversation?
  messages     Message[]
  tags         Tag[]         @relation("ContactToTag")

  @@index([phoneNumber])
  @@index([stageId, stageUserId])
  @@index([chatAgentId])
}

model Agent {
  id              String  @id @default(uuid()) @db.Uuid
  userId          String  @db.Uuid
  prompt          String
  name            String
  backgroundSound String?
  firstMessage    String
  vapiId          String? @unique
  voiceId         String?
  User            User    @relation(fields: [userId], references: [id])
}

model PhoneNumber {
  id              String   @id @default(uuid()) @db.Uuid
  provider        String
  number          String
  extension       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String   @db.Uuid
  name            String?  @default("nuevo-numero")
  sipPassword     String?
  sipUri          String?
  sipUsername     String?
  twilioAccountId String?
  twilioAuthToken String?
  vapiId          String?  @unique @db.Uuid
  credentialId    String?  @db.Uuid
  assistantId     String?  @db.Uuid
  workflowId      String?  @db.Uuid
  user            User     @relation(fields: [userId], references: [id])
}

model Workflow {
  id           String   @id @default(uuid()) @db.Uuid
  name         String
  vapiId       String?  @unique
  tools        Json?
  workflowJson Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String   @db.Uuid
  user         User     @relation(fields: [userId], references: [id])
}

model Connection {
  id                String   @id @default(uuid()) @db.Uuid
  connectionId      String
  providerConfigKey String?
  authMode          String
  endUserId         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String   @db.Uuid
  user              User     @relation(fields: [userId], references: [id])
}

model KnowledgeBase {
  id           String   @id @default(uuid()) @db.Uuid
  trieveApiKey String
  vapiId       String?  @unique
  name         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String   @db.Uuid
  credentialId String
  user         User     @relation(fields: [userId], references: [id])
}

model ChatAgent {
  id                    String            @id @default(uuid()) @db.Uuid
  name                  String
  isActive              Boolean           @default(true)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  whatsappBusinessId    String
  apiKey                String
  totalMessages         Int               @default(0)
  activeChats           Int               @default(0)
  averageResponseTime   Int               @default(0)
  userId                String            @db.Uuid
  stageId               String?
  stageUserId           String?           @db.Uuid
  phoneNumber           String            @unique
  phoneNumberId         String
  type                  TYPE_CHAT_AGENT   @default(SALES)
  wompiEventsKey        String?
  wompiPrivateKey       String?
  businessInfo          Json?
  whatsappWebhookSecret String            @unique @default("")
  webhook_verify        Boolean           @default(false)
  stage                 Stage?            @relation(fields: [stageId, stageUserId], references: [id, userId])
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  contacts              Contact[]
  leads                 Lead[]
  messages              Message[]
  messageTemplates      MessageTemplate[]
  orders                Order[]
  products              Product[]
  tags                  Tag[]             @relation("ChatAgentToTag")

  @@index([userId])
  @@index([stageId, stageUserId])
}

model Message {
  waId        String      @unique
  from        String
  to          String
  timestamp   DateTime
  type        MessageType
  textBody    String?
  metadata    Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  contactId   String      @db.Uuid
  id          String      @id @default(uuid()) @db.Uuid
  chatAgentId String?     @db.Uuid
  chatAgent   ChatAgent?  @relation(fields: [chatAgentId], references: [id], onDelete: Cascade)
  contact     Contact     @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@index([from])
  @@index([timestamp])
  @@index([contactId])
  @@index([chatAgentId])
}

model Conversation {
  id                  String    @id @default(uuid()) @db.Uuid
  contactId           String    @unique @db.Uuid
  lastMessageAt       DateTime  @default(now())
  lastAgentMessageAt  DateTime?
  isActive            Boolean   @default(true)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  totalMessages       Int       @default(0)
  totalAgentMessages  Int       @default(0)
  averageResponseTime Int       @default(0)
  lastResponseTime    Int?
  isOver24Hours       Boolean   @default(false)
  contact             Contact   @relation(fields: [contactId], references: [id])

  @@index([lastMessageAt])
  @@index([isActive])
}

model MessageTemplate {
  id          String         @id @default(uuid()) @db.Uuid
  externalId  String?        @unique
  name        String
  language    String
  category    String
  status      TemplateStatus @default(PENDING)
  components  Json
  chatAgentId String         @db.Uuid
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  chatAgent   ChatAgent      @relation(fields: [chatAgentId], references: [id], onDelete: Cascade)

  @@unique([name, chatAgentId])
}

model Lead {
  id          String     @id @default(uuid())
  name        String
  company     String
  email       String
  phone       String
  status      String?
  tags        String[]
  lastContact String
  notes       String?
  value       Float?
  userId      String     @db.Uuid
  stageId     String
  chatAgentId String?    @db.Uuid
  chatAgent   ChatAgent? @relation(fields: [chatAgentId], references: [id])
  stage       Stage      @relation(fields: [stageId, userId], references: [id, userId])
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([stageId, userId])
  @@index([chatAgentId])
}

model Stage {
  name       String
  color      String
  userId     String      @db.Uuid
  id         String
  chatAgents ChatAgent[]
  contacts   Contact[]
  leads      Lead[]
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([id, userId])
  @@unique([name, userId])
}

model Tag {
  name       String
  color      String
  userId     String      @db.Uuid
  id         String      @id @default(uuid()) @db.Uuid
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatAgents ChatAgent[] @relation("ChatAgentToTag")
  contacts   Contact[]   @relation("ContactToTag")

  @@unique([name, userId])
}

model Product {
  id          String    @id @default(uuid()) @db.Uuid
  name        String
  description String?
  price       Float
  stock       Int       @default(0)
  images      Json
  category    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  chatAgentId String    @db.Uuid
  chatAgent   ChatAgent @relation(fields: [chatAgentId], references: [id], onDelete: Cascade)
}

model Order {
  id                     String      @id @default(uuid()) @db.Uuid
  chatAgentId            String      @db.Uuid
  userId                 String      @db.Uuid
  productIds             String[]
  totalAmount            Float
  paymentLink            String
  status                 OrderStatus @default(PENDING)
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @default(now())
  amountInCents          Int?
  billingData            Json?
  currency               String?
  customerData           Json?
  customerEmail          String?
  origin                 String?
  paymentLinkId          String?
  paymentMethod          Json?
  paymentMethodType      String?
  paymentSourceId        String?
  productQuantities      Json?
  redirectUrl            String?
  reference              String?
  shippingAddress        Json?
  statusMessage          String?
  transactionCreatedAt   DateTime?
  transactionFinalizedAt DateTime?
  transactionId          String?
  chatAgent              ChatAgent   @relation(fields: [chatAgentId], references: [id], onDelete: Cascade)
  user                   User        @relation(fields: [userId], references: [id])
}

model Call {
  id                  String    @id @default(uuid()) @db.Uuid
  vapiId              String?   @unique
  type                String
  orgId               String?
  createdAt           DateTime
  updatedAt           DateTime
  startedAt           DateTime?
  endedAt             DateTime?
  status              String
  endedReason         String?
  cost                Float?
  costBreakdown       Json?
  costs               Json[]
  phoneCallProvider   String?
  phoneCallTransport  String?
  phoneCallProviderId String?
  messages            Json[]
  assistantId         String?
  assistantOverrides  Json?
  squadId             String?
  workflowId          String?
  phoneNumberId       String?
  customerId          String?
  destination         Json?
  artifactPlan        Json?
  analysis            Json?
  monitor             Json?
  artifact            Json?
  schedulePlan        Json?
  transport           Json?
  name                String?

  @@map("calls")
}

model Subscription {
  id                 String  @id @default(uuid()) @db.Uuid
  planId             String  @db.Uuid
  status             String
  userId             String  @db.Uuid
  lemonSqueezyId     String  @unique
  email              String
  endsAt             String?
  isPaused           Boolean @default(false)
  isUsageBased       Boolean @default(false)
  name               String
  orderId            Int
  price              String
  renewsAt           String?
  statusFormatted    String
  subscriptionItemId String? @default(uuid())
  trialEndsAt        String?
  plan               Plan    @relation(fields: [planId], references: [id])
  user               User    @relation(fields: [userId], references: [id])
}

model Plan {
  id                 String         @id @default(uuid()) @db.Uuid
  name               String
  price              String
  interval           String?
  description        String?
  intervalCount      Int?
  isUsageBased       Boolean        @default(false)
  productId          Int
  productName        String?
  sort               Int?
  trialInterval      String?
  trialIntervalCount Int?
  variantId          Int            @unique
  subscriptions      Subscription[]
}

model Transaction {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  amount    Float
  type      String
  status    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Integration {
  id             String              @id @default(uuid()) @db.Uuid
  userId         String              @db.Uuid
  provider       IntegrationProvider
  status         IntegrationStatus   @default(ACTIVE)
  accessToken    String?
  refreshToken   String?
  tokenExpiresAt DateTime?
  scopes         String[]
  metadata       Json?
  lastSyncedAt   DateTime?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([provider])
  @@index([status])
}

enum IntegrationProvider {
  FACEBOOK
  GOOGLE_CALENDAR
  GOOGLE_SHEETS
  CAL_COM
  HUBSPOT
  AIRTABLE
}

enum IntegrationStatus {
  ACTIVE
  INACTIVE
  ERROR
  PENDING
  EXPIRED
}

enum MessageType {
  TEXT
  IMAGE
  AUDIO
  VIDEO
  DOCUMENT
  LOCATION
  CONTACTS
  BUTTON
  INTERACTIVE
}

enum TYPE_AGENT {
  outbound
  inbound
  widget
}

enum TYPE_CHAT_AGENT {
  SALES
}

enum OrderStatus {
  PENDING
  APPROVED
  FAILED
  CANCELLED
}

enum TemplateStatus {
  PENDING
  APPROVED
  REJECTED
}

/// ---------------------------------------------
/// Lemon Squeezy – Subscription billing (SaaS)
/// ---------------------------------------------
model LsPlan {
  id             String           @id @default(uuid()) @db.Uuid
  storeId        Int
  productId      Int
  variantId      Int              @unique
  name           String
  price          Int              /// price in cents
  interval       String?
  intervalCount  Int?
  isUsageBased   Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  subscriptions  LsSubscription[]
}

model LsSubscription {
  id                String               @id @default(uuid()) @db.Uuid
  lsSubscriptionId  Int                  @unique
  userId            String               @db.Uuid
  planId            String               @db.Uuid
  status            LsSubscriptionStatus
  renewsAt          DateTime?
  endsAt            DateTime?
  trialEndsAt       DateTime?
  isPaused          Boolean              @default(false)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  user              User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan              LsPlan               @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([planId])
}

enum LsSubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELLED
  EXPIRED
  TRIALING
}
