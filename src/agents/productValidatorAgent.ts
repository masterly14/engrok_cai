import { ChatAnthropic } from "@langchain/anthropic";
import { LLMChain } from "langchain/chains";
import { PromptTemplate } from "@langchain/core/prompts";
import { StringOutputParser } from "@langchain/core/output_parsers";

interface ProductValidationResult {
  isValid: boolean;
  recommendations?: string[];
}

interface ProductToValidate {
  name: string;
  description: string;
  category?: string;
  price?: number;
}

export class ProductValidatorAgent {
  private chain: LLMChain;
  private model: ChatAnthropic;

  constructor(model?: ChatAnthropic) {
    // Si no se proporciona un modelo, crear uno por defecto
    this.model = model || new ChatAnthropic({
      apiKey: process.env.NEXT_PUBLIC_ANTHROPIC_API_KEY,
      modelName: "claude-3-sonnet-20240229",
      temperature: 0.3,
    });

    const prompt = PromptTemplate.fromTemplate(`
Eres un experto en marketing y ventas online. Tu tarea es analizar la informaci√≥n de un producto y dar recomendaciones ESPEC√çFICAS y ACCIONABLES para mejorar su descripci√≥n y aumentar las ventas.

Producto a analizar:
- Nombre: {productName}
- Categor√≠a: {category}
- Precio: {price}
- Descripci√≥n: {description}

IMPORTANTE: 
- Debes responder √öNICAMENTE en formato JSON v√°lido.
- Si la descripci√≥n es excelente (completa, atractiva, con beneficios claros), responde: {"isValid": true}
- Si necesita mejoras, incluye recomendaciones espec√≠ficas en espa√±ol.
- Las recomendaciones deben ser CLARAS, CONCISAS y ACCIONABLES.
- Usa emojis para hacer las recomendaciones m√°s amigables.
- M√°ximo 5 recomendaciones, las m√°s importantes primero.

Analiza estos aspectos:
1. ¬øIncluye caracter√≠sticas espec√≠ficas del producto? (tama√±o, material, color, etc.)
2. ¬øMenciona beneficios claros para el cliente?
3. ¬øEs √∫nica y diferenciada o muy gen√©rica?
4. ¬øTiene la longitud adecuada? (50-500 caracteres ideal)
5. ¬øIncluye informaci√≥n relevante para la categor√≠a?
6. ¬øGenera confianza y deseo de compra?

Para la categor√≠a "{category}", considera aspectos espec√≠ficos como:
- Electr√≥nica: compatibilidad, garant√≠a, especificaciones t√©cnicas
- Ropa: tallas, materiales, cuidados
- Alimentos: ingredientes, caducidad, conservaci√≥n
- Hogar: dimensiones, instalaci√≥n, materiales

Formato de respuesta:
{
  "isValid": boolean,
  "recommendations": ["recomendaci√≥n 1", "recomendaci√≥n 2", ...]
}

RESPONDE SOLO CON EL JSON, SIN TEXTO ADICIONAL.
`);

    this.chain = new LLMChain({
      llm: this.model,
      prompt,
      outputParser: new StringOutputParser(),
    });
  }

  async validateProduct(product: ProductToValidate): Promise<ProductValidationResult> {
    try {
      // Validaciones b√°sicas antes de usar AI
      if (!product.name || product.name.trim().length < 3) {
        return {
          isValid: false,
          recommendations: ["üìù El nombre del producto debe tener al menos 3 caracteres"],
        };
      }

      if (!product.description || product.description.trim().length < 10) {
        return {
          isValid: false,
          recommendations: ["üìÑ La descripci√≥n es muy corta. Describe tu producto para aumentar las ventas"],
        };
      }

      // Usar AI para an√°lisis profundo
      const response = await this.chain.predict({
        productName: product.name || "Sin nombre",
        category: product.category || "General",
        price: product.price || 0,
        description: product.description || "",
      });

      // Parsear la respuesta JSON
      try {
        const result = JSON.parse(response.trim());
        return {
          isValid: result.isValid || false,
          recommendations: result.recommendations || undefined,
        };
      } catch (parseError) {
        console.error("Error parsing AI response:", parseError);
        // Si falla el parsing, intentar extraer recomendaciones del texto
        return this.fallbackParse(response);
      }
    } catch (error) {
      console.error("Error in product validation:", error);
      // Fallback a validaci√≥n b√°sica si falla la AI
      return this.basicValidation(product);
    }
  }

  private fallbackParse(response: string): ProductValidationResult {
    // Intentar extraer informaci√≥n √∫til de la respuesta aunque no sea JSON v√°lido
    const isValid = response.toLowerCase().includes("v√°lid") || response.toLowerCase().includes("excelente");
    const recommendations: string[] = [];
    
    // Buscar l√≠neas que parezcan recomendaciones
    const lines = response.split('\n').filter(line => line.trim());
    for (const line of lines) {
      if (line.includes("üìù") || line.includes("üí°") || line.includes("üéØ") || 
          line.includes("‚ö°") || line.includes("üìè") || line.includes("üöÄ")) {
        recommendations.push(line.trim());
      }
    }

    return {
      isValid: !recommendations.length,
      recommendations: recommendations.length > 0 ? recommendations : undefined,
    };
  }

  private basicValidation(product: ProductToValidate): ProductValidationResult {
    const recommendations: string[] = [];
    
    if (product.description.length < 50) {
      recommendations.push("üìè Ampl√≠a la descripci√≥n para dar m√°s confianza al cliente");
    }
    
    if (!product.category) {
      recommendations.push("üì¶ Agrega una categor√≠a para ayudar a los clientes a encontrar tu producto");
    }
    
    const descLower = product.description.toLowerCase();
    if (!descLower.includes("ideal para") && !descLower.includes("perfecto para")) {
      recommendations.push("üéØ Menciona para qui√©n o qu√© situaci√≥n es ideal tu producto");
    }

    return {
      isValid: recommendations.length === 0,
      recommendations: recommendations.length > 0 ? recommendations : undefined,
    };
  }

  // M√©todo para obtener preguntas de mejora usando AI
  async getImprovementQuestions(product: ProductToValidate): Promise<string[]> {
    const questionPrompt = PromptTemplate.fromTemplate(`
Bas√°ndote en esta descripci√≥n de producto, genera 2-3 preguntas clave que el vendedor deber√≠a responder en su descripci√≥n para hacerla m√°s completa y atractiva.

Producto: {productName}
Categor√≠a: {category}
Descripci√≥n actual: {description}

Las preguntas deben:
- Ser espec√≠ficas y relevantes para este producto
- Ayudar a destacar beneficios √∫nicos
- Estar en espa√±ol y empezar con "‚ùì"
- Ser diferentes a la informaci√≥n ya incluida

Responde SOLO con las preguntas, una por l√≠nea.
`);

    const questionChain = new LLMChain({
      llm: this.model,
      prompt: questionPrompt,
      outputParser: new StringOutputParser(),
    });

    try {
      const response = await questionChain.predict({
        productName: product.name || "Sin nombre",
        category: product.category || "General",
        description: product.description || "",
      });

      return response
        .split('\n')
        .filter(line => line.trim() && line.includes("‚ùì"))
        .map(line => line.trim())
        .slice(0, 3);
    } catch (error) {
      console.error("Error generating improvement questions:", error);
      // Fallback a preguntas gen√©ricas
      return [
        "‚ùì ¬øPara qui√©n est√° dise√±ado este producto?",
        "‚ùì ¬øQu√© problema espec√≠fico resuelve?",
        "‚ùì ¬øQu√© lo hace √∫nico comparado con otros similares?",
      ];
    }
  }
}

// Exportar una instancia singleton
export const productValidatorAgent = new ProductValidatorAgent();